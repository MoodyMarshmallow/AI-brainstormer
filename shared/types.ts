/**
 * ===================================================================
 * SHARED TYPES - Forum AI Brainstorming Application
 * ===================================================================
 * 
 * This file contains all TypeScript type definitions and interfaces
 * shared between the client and server components of the Forum application.
 * 
 * Forum is an AI brainstorming tool that explores ideas through three
 * distinct AI personalities: Optimist, Pessimist, and Realist. Each
 * personality provides unique perspectives on user-submitted topics.
 * 
 * Key Features:
 * - Interactive graph-based conversation visualization
 * - Three-perspective AI response generation
 * - Branching conversation exploration
 * - Session-based conversation management
 * 
 * @author Forum Development Team
 * @version 1.0.0
 * @since 2025
 */

// ===================================================================
// PERSONALITY SYSTEM TYPES
// ===================================================================

/**
 * Represents the three distinct AI personalities used in Forum.
 * Each personality approaches topics from a different perspective:
 * - 'optimist': Focuses on opportunities and positive outcomes
 * - 'pessimist': Identifies risks and potential challenges
 * - 'realist': Provides balanced, practical analysis
 */
export type PersonalityName = 'optimist' | 'pessimist' | 'realist';

/**
 * Represents a response generated by a specific AI personality.
 * Contains the personality identifier, response text, and associated color.
 */
export interface PersonalityResponse {
  /** The AI personality that generated this response */
  persona: PersonalityName;
  
  /** The actual text content of the personality's response */
  text: string;
  
  /** Hex color code associated with this personality for UI theming */
  color: string;
}

// ===================================================================
// GRAPH STRUCTURE TYPES
// ===================================================================

/**
 * Represents a single node in the conversation graph.
 * Nodes can be either user prompts or AI personality responses.
 */
export interface Node {
  /** Unique identifier for this node */
  id: string;
  
  /** The text content displayed in this node */
  text: string;
  
  /** Optional reference to the parent node this branches from */
  parentId?: string;
  
  /** Coordinates for positioning this node in the graph visualization */
  position: { x: number; y: number };
  
  /** 
   * Type of node:
   * - 'prompt': User-submitted topic or question
   * - 'response': AI-generated personality response
   */
  type: 'prompt' | 'response';
  
  /** 
   * AI personality that generated this response (only for response nodes)
   * Undefined for prompt nodes
   */
  persona?: PersonalityName;
  
  /** 
   * Color associated with this node for UI theming
   * Matches the personality color for response nodes
   */
  color?: string;
}

/**
 * Represents a connection between two nodes in the conversation graph.
 * Edges show the flow of conversation from prompts to responses
 * and from responses to follow-up explorations.
 */
export interface Edge {
  /** Unique identifier for this edge */
  id: string;
  
  /** Node ID that this edge originates from */
  source: string;
  
  /** Node ID that this edge connects to */
  target: string;
}

// ===================================================================
// SESSION MANAGEMENT TYPES
// ===================================================================

/**
 * Represents a complete brainstorming session containing all
 * conversation nodes and their connections.
 */
export interface Session {
  /** Unique identifier for this session */
  id: string;
  
  /** Array of all nodes in this session's conversation graph */
  nodes: Node[];
  
  /** Array of all edges connecting nodes in this session */
  edges: Edge[];
  
  /** Timestamp when this session was created */
  createdAt: Date;
}

// ===================================================================
// API REQUEST/RESPONSE TYPES
// ===================================================================

/**
 * Request payload for initiating a new brainstorming session.
 * Forum automatically generates responses from all three personalities.
 */
export interface BrainstormRequest {
  /** The topic or question to explore with AI personalities */
  prompt: string;
  
  // Note: Forum always returns exactly 3 personality responses
  // (removed numVariants - not needed for fixed personality system)
}

/**
 * Response payload for a new brainstorming session.
 * Contains the session ID and initial graph with personality responses.
 */
export interface BrainstormResponse {
  /** Unique identifier for the created session */
  sessionId: string;
  
  /** Array of nodes created (prompt + 3 personality responses) */
  nodes: Node[];
  
  /** Array of edges connecting the prompt to personality responses */
  edges: Edge[];
}

/**
 * Request payload for branching/expanding an existing conversation.
 * Allows users to explore deeper into any personality's response.
 */
export interface BranchRequest {
  /** The session ID to branch within */
  sessionId: string;
  
  /** The node ID to branch from (typically a personality response) */
  nodeId: string;
  
  /** 
   * Optional follow-up prompt for more specific exploration
   * If not provided, personalities will elaborate on their previous response
   */
  prompt?: string;
}

/**
 * Response payload for branching/expanding a conversation.
 * Contains new nodes and edges to add to the existing session graph.
 */
export interface BranchResponse {
  /** Array of new nodes created from the branching operation */
  newNodes: Node[];
  
  /** Array of new edges connecting the new nodes to the existing graph */
  newEdges: Edge[];
} 